```dataviewjs
const DAY = 0;
const MONTH = 1;
const YEAR = 2;

/* See which of the two date links represents the most recent in time.
    Returns: true if dateLink2 is more recent than dateLink1
             true if dateLink1 is null or undefined
             false if dataLink2 is null or undefined
             false if dataLink1 is null or undefined
*/  
function getMostRecentDate(dateLink1, dateLink2){
	let mostRecentDate = dateLink1;

	if (dateLink1 === null || dateLink1 === undefined) return true;
	if (dateLink2 === null || dateLink2 === undefined) return false;

	let page1WorkedOn = dv.page(dateLink1).file.name.split("-");
	let page2WorkedOn = dv.page(dateLink2).file.name.split("-");

	if (page2WorkedOn[YEAR] > page1WorkedOn[YEAR]){
		mostRecentDate = dateLink2;
	}
	else if (page2WorkedOn[YEAR] == page1WorkedOn[YEAR]){
		if (page2WorkedOn[MONTH] > page1WorkedOn[MONTH]){
			mostRecentDate = dateLink2;
		}
		else if (page2WorkedOn[MONTH] == page1WorkedOn[MONTH]){
			if (page2WorkedOn[DAY] > page1WorkedOn[DAY]){
				mostRecentDate = dateLink2;
			}
		}
	}	
	return mostRecentDate == dateLink1;
}

function isProjectTask(task){
	if ((task == null) || (task==undefined))
		return false;

	var project = dv.current();
 
    if (task.Project.toString().contains(project.file.name)){
		// Poke the most recent task worked on date into the project last worked on field.
		project.LastWorkedOn = getMostRecentDate(project.LastWorkedOn, task.LastWorkedOn)
	
		// See if the associated Goal last worked on field needs to be poked as well.
		if ((project.Goal == null) || (project.Goal == undefined))
			return false;
		else {
			var goal = dv.page(project.Goal);
			goal.LastWorkedOn = getMostRecentDate(goal.LastWorkedOn, task.LastWorkedOn);
		}
		return true;
	}
	return false;
}

/* Display a table of all tasks associated with this project  */
dv.table(["Task Name", "Status", "Due Date", "Last Worked On"],
	dv.pages('"3. Planning/3. Tasks" and #planning/task')
	.where(task => isProjectTask(task))
	.sort(task => task.LastWorkedOn, "desc", getMostRecentDate)
	.map(task => [task.file.link, task.Status, task.TargetDate, task.LastWorkedOn])
)
```
